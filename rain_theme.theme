<?php

/**
 * @file
 * Functions to support theming in the rain_theme theme.
 */

use Drupal\image\Entity\ImageStyle;
use Drupal\Component\Utility\Html;
use Drupal\Core\Link;
use Drupal\Core\Url;

/**
 * Implements hook_preprocess_HOOK() for paragraphs.
 */
function rain_theme_preprocess_paragraph(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  // Get the parent bundle.
  $parent_bundle = $paragraph->getParentEntity()->bundle();
  if ($paragraph->bundle() === 'view') {
    // Add wrapper to the paragraph views.
    $view_ref = $variables['paragraph']->field_view_ref->getValue();
    $variables['wrapper_class'] = str_replace('-', '_', $view_ref[0]['target_id'] . '-' . $view_ref[0]['display_id'] . '__wrapper');
  }
  // Pass along total count to template.
  if ($parent_bundle == 'hero_media') {
    if ($paragraph->getParentEntity()->hasField('field_card')) {
      $variables['count'] = $paragraph->getParentEntity()->get('field_card')->count();
    }
  }
  elseif ($paragraph->bundle() == 'card_list') {
    $variables['layout'] = $paragraph->get('field_card_list_layout')->value;
  }
  // We want to render a gallery carousel if "gallery_carousel" is the parent.
  elseif ($paragraph->bundle() == 'gallery_carousel') {
    $carousel_items = [];
    $carousel_thumbs = [];

    if ($paragraph->hasField('field_card')) {
      $count = $paragraph->get('field_card')->count();

      // Populate thumbs and images.
      for ($c = 0; $c < $count; $c++) {
        $card = $paragraph->get('field_card')[$c]->entity;
        $image_url = file_create_url($card->get('field_media')->entity->get('field_image')->entity->getFileUri());
        if ($card->hasField('field_thumb') && !empty($card->get('field_thumb')->entity)) {
          $thumb_url = file_create_url($card->get('field_thumb')->entity->getFileUri());
        }
        else {
          $thumb_url = $image_url;
        }

        $item = [
          'media' => $image_url,
          'media_description' => $card->get('field_summary')->value,
        ];

        $thumb = [
          'media_thumb' => $thumb_url,
        ];

        $carousel_items[] = $item;
        $carousel_thumbs[] = $thumb;
      }

      $variables['carousel_items'] = $carousel_items;
      $variables['carousel_thumbs'] = $carousel_thumbs;
    }
  }
  $paragraph_preprocess_function = 'rain_theme_preprocess_paragraph__' . $paragraph->bundle();
  if (function_exists($paragraph_preprocess_function)) {
    $paragraph_preprocess_function($variables);
  }
}

/**
 * Callback to preprocess the Quote Carousel paragraph.
 */
function rain_theme_preprocess_paragraph__quote_carousel(&$variables) {
  $total_items = $variables['content']['field_quotes']['#items']->count();
  $carousel_items = [];
  if ($total_items) {
    for ($i = 0; $i < $total_items; $i++) {
      $carousel_items[] = $variables['content']['field_quotes'][$i];
    }
  }
  $variables['carousel_items'] = $carousel_items;
}

/**
 * Callback to preprocess the views paragraph.
 */
function rain_theme_preprocess_paragraph__view(&$variables) {
  $view_ref = $variables['paragraph']->field_view_ref->getValue();
  if ($view_ref[0]['target_id'] === 'events' && $view_ref[0]['display_id'] === 'carousel') {
    $variables['links'] = Link::fromTextAndUrl('View All Events', Url::fromUri('internal:/events'));
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for search_api_page_block_form_search_results().
 */
function rain_theme_form_search_api_page_block_form_search_results_alter(&$form, $form_state, $form_id) {
  // Remove the 'invisible' option on the label.
  unset($form['keys']['#title_display']);

  // Let the CSS more easily adjust the size of the field.
  unset($form['keys']['#size']);

  // Change the title of the keywords field.
  $form['keys']['#title'] = t('Search term(s)');

  // Adding placeholder to text search field.
  $form['keys']['#attributes']['placeholder'] = t('Search Site');
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for 'input'.
 */
function rain_theme_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  // On submit buttons, add a theme suggestion that appends the submit button's
  // label to the filename, e.g. if the submit button is "Search" then the file
  // suggestion becomes "input__submit__search".
  if ($variables['theme_hook_original'] == 'input__submit') {
    if (!empty($variables['element']['#value'])) {
      $title = strtolower(Html::cleanCssIdentifier($variables['element']['#value']));
      $suggestions[] = $variables['theme_hook_original'] . '__' . $title;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function rain_theme_preprocess_html(array &$variables) {

}

/**
 * Implements hook_page_attachments_alter().
 */
function rain_theme_page_attachments_alter(array &$page) {

}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function rain_theme_preprocess_page(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function rain_theme_theme_suggestions_page_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function rain_theme_theme_suggestions_node_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_HOOK().
 */
function rain_theme_preprocess_block(array &$variables) {
  // Use inline svg in the branding block.
  if ($variables['plugin_id'] == 'system_branding_block') {
    if (isset($variables['site_logo'])) {
      $logo_path = DRUPAL_ROOT . $variables['site_logo'];
      // If logo is a SVG lets load it content so we can inline it.
      if (strlen($logo_path) - strpos($logo_path, '.svg') === 4) {
        $variables['site_logo_svg'] = file_get_contents($logo_path);
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function rain_theme_theme_suggestions_field_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function rain_theme_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_node().
 */
function rain_theme_preprocess_node(array &$variables) {
  if (!empty($variables['elements']['#node']) && is_object($variables['elements']['#node']) && method_exists($variables['elements']['#node'], 'getType')) {
    // Ensure that the node variable exists and is an object.
    $function = __FUNCTION__ . '_' . $variables['elements']['#node']->getType();
    if (function_exists($function)) {
      $function($variables);
    }
  }
  
  if (!empty($variables['view_mode']) && $variables['view_mode'] === 'carousel') {
    if ($variables['node']->bundle() === 'event') {
      $variables['link'] = [
        'url' => $variables['url'],
        'text' => t('Read More >'),
      ];
      if (!empty($variables['content']['field_dates'])) {
        $dates = $variables['content']['field_dates']['#items']->first()->getValue();
        // If there is a start date from the date range, capture those dates in
        // a variable.
        if ($dates['value']) {
          $unix_time = strtotime($dates['value']);
          $formatted_date = \Drupal::service('date.formatter')->format($unix_time, 'custom', 'M');
          $variables['event_date']['month'] = \Drupal::service('date.formatter')->format($unix_time, 'custom', 'M');
          $variables['event_date']['day'] = \Drupal::service('date.formatter')->format($unix_time, 'custom', 'd');
          $variables['event_date']['week'] = \Drupal::service('date.formatter')->format($unix_time, 'custom', 'l');
          $variables['event_date']['display'] = \Drupal::service('date.formatter')->format($unix_time, 'custom', 'l d');
        }
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function rain_theme_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
}

/**
 * Implements hook_preprocess_form().
 */
function rain_theme_preprocess_form(array &$variables) {
}

/**
 * Implements hook_preprocess_select().
 */
function rain_theme_preprocess_select(array &$variables) {
}

/**
 * Implements hook_preprocess_field().
 */
function rain_theme_preprocess_field(array &$variables, $hook) {
}

/**
 * Implements hook_preprocess_details().
 */
function rain_theme_preprocess_details(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function rain_theme_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_paragraph_alter().
 */
function rain_theme_theme_suggestions_paragraph_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['elements']['#paragraph'];
  if ($paragraph->bundle() === 'view') {
    $view_ref = $paragraph->field_view_ref->getValue();
    // Add suggestions for paragraph views with different views id and block.
    $suggestions[] = 'paragraph__view__' . $view_ref[0]['target_id'] . '_' . $view_ref[0]['display_id'];
  }
}

/**
 * Implements hook_preprocess_preprocess_views_view_fields().
 */
function rain_theme_preprocess_views_view_fields__latest_news__block_1(array &$variables) {
  // Separate the link and the text for the more link.
  if (isset($variables['fields']['view_node'])) {
    $more_link = Url::fromRoute('entity.node.canonical', ['node' => $variables['row']->nid]);
    $variables['more_link'] = [
      'url' => $more_link->toString(),
      'text' => t('Read more'),
    ];
  }
  if (isset($variables['row']->index)) {
    if ($variables['row']->index === 0) {
      // Make the first card horizontal display.
      $variables['modifier'] = 'horizontal';
    }
  }
}
