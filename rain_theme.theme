<?php

/**
 * @file
 * Functions to support theming in the rain_theme theme.
 */

use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Link;
use Drupal\Core\Url;

/**
 * Implements hook_preprocess_HOOK() for paragraphs.
 */
function rain_theme_preprocess_paragraph(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  // Get the parent bundle.
  $parent_bundle = $paragraph->getParentEntity()->bundle();
  if ($paragraph->bundle() === 'view') {
    // Add wrapper to the paragraph views.
    $view_ref = $variables['paragraph']->field_view_ref->getValue();
    $variables['wrapper_class'] = str_replace('-', '_', $view_ref[0]['target_id'] . '-' . $view_ref[0]['display_id'] . '__wrapper');
  }
  // Pass along total count to template.
  if ($parent_bundle == 'hero_media') {
    if ($paragraph->getParentEntity()->hasField('field_card')) {
      $variables['count'] = $paragraph->getParentEntity()->get('field_card')->count();
    }
  }
  // We want to render a gallery carousel if "gallery_carousel" is the parent.
  elseif ($paragraph->bundle() == 'gallery_carousel') {
    $carousel_items = [];
    $carousel_thumbs = [];

    if ($paragraph->hasField('field_card')) {
      $count = $paragraph->get('field_card')->count();

      // Populate thumbs and images.
      for ($c = 0; $c < $count; $c++) {
        $card = $paragraph->get('field_card')[$c]->entity;
        $image_url = file_create_url($card->get('field_media')->entity->get('field_image')->entity->getFileUri());
        if ($card->hasField('field_thumb') && !empty($card->get('field_thumb')->entity)) {
          $thumb_url = file_create_url($card->get('field_thumb')->entity->getFileUri());
        }
        else {
          $thumb_url = $image_url;
        }

        $item = [
          'media' => $image_url,
          'media_description' => $card->get('field_summary')->value,
        ];

        $thumb = [
          'media_thumb' => $thumb_url,
        ];

        $carousel_items[] = $item;
        $carousel_thumbs[] = $thumb;
      }

      $variables['carousel_items'] = $carousel_items;
      $variables['carousel_thumbs'] = $carousel_thumbs;
    }
  }
  $paragraph_preprocess_function = 'rain_theme_preprocess_paragraph__' . $paragraph->bundle();
  if (function_exists($paragraph_preprocess_function)) {
    $paragraph_preprocess_function($variables);
  }
}

/**
 * Callback to preprocess the Quote Carousel paragraph.
 */
function rain_theme_preprocess_paragraph__quote_carousel(&$variables) {
  $total_items = $variables['content']['field_quotes']['#items']->count();
  $carousel_items = [];
  if ($total_items) {
    for ($i = 0; $i < $total_items; $i++) {
      $carousel_items[] = $variables['content']['field_quotes'][$i];
    }
  }
  $variables['carousel_items'] = $carousel_items;
}

/**
 * Callback to preprocess the views paragraph.
 */
function rain_theme_preprocess_paragraph__view(&$variables) {
  $view_ref = $variables['paragraph']->field_view_ref->getValue();
  if ($view_ref[0]['target_id'] === 'events' && $view_ref[0]['display_id'] === 'carousel') {
    $variables['links'] = Link::fromTextAndUrl('View All Events', Url::fromUri('internal:/events'));
  }
}

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function rain_theme_preprocess_html(array &$variables) {
  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');

  // Don't display the site name twice on the front page
  // (and potentially others)
  /*if (isset($variables['head_title_array']['title'])
    && isset($variables['head_title_array']['name'])
    && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
    $variables['head_title'] = $variables['head_title_array']['name'];
  }*/
}

/**
 * Implements hook_page_attachments_alter().
 */
function rain_theme_page_attachments_alter(array &$page) {
  // Tell IE to use latest rendering engine (not to use compatibility mode).
  /*$ie_edge = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
    'http-equiv' => 'X-UA-Compatible',
    'content' => 'IE=edge',
    ],
  ];
  $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];*/
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function rain_theme_preprocess_page(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function rain_theme_theme_suggestions_page_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function rain_theme_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /*$node = $variables['elements']['#node'];

  if ($variables['elements']['#view_mode'] == "full") {

  }*/
}

/**
 * Implements hook_preprocess_HOOK().
 */
function rain_theme_preprocess_block(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function rain_theme_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  $suggestions[] = 'field__' . $element['#view_mode'];
  $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];*/
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function rain_theme_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  if (isset($element['#attributes']['class'])
    && in_array('form-composite', $element['#attributes']['class'])) {
    $suggestions[] = 'fieldset__form_composite';
  }*/
}

/**
 * Implements hook_preprocess_node().
 */
function rain_theme_preprocess_node(array &$variables) {
  if (!empty($variables['view_mode']) && $variables['view_mode'] === 'carousel') {
    if ($variables['node']->bundle() === 'event') {
      $variables['link'] = [
        'url' => $variables['url'],
        'text' => t('Read More >'),
      ];
      if (!empty($variables['content']['field_dates'])) {
        $dates = $variables['content']['field_dates']['#items']->first()->getValue();
        // If there is a start date from the date range, capture those dates in
        // a variable.
        if ($dates['value']) {
          $unix_time = strtotime($dates['value']);
          $formatted_date = \Drupal::service('date.formatter')->format($unix_time, 'custom', 'M');
          $variables['event_date']['month'] = \Drupal::service('date.formatter')->format($unix_time, 'custom', 'M');
          $variables['event_date']['day'] = \Drupal::service('date.formatter')->format($unix_time, 'custom', 'd');
          $variables['event_date']['week'] = \Drupal::service('date.formatter')->format($unix_time, 'custom', 'l');
          $variables['event_date']['display'] = \Drupal::service('date.formatter')->format($unix_time, 'custom', 'l d');
        }
      }
    }
  }
  // Default to turning off byline/submitted.
  //$variables['display_submitted'] = FALSE;
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function rain_theme_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_form().
 */
function rain_theme_preprocess_form(array &$variables) {
  //$variables['attributes']['novalidate'] = 'novalidate';
}

/**
 * Implements hook_preprocess_select().
 */
function rain_theme_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function rain_theme_preprocess_field(array &$variables, $hook) {
  /*switch ($variables['element']['#field_name']) {
  }*/
}

/**
 * Implements hook_preprocess_details().
 */
function rain_theme_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function rain_theme_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_paragraph_alter().
 */
function rain_theme_theme_suggestions_paragraph_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['elements']['#paragraph'];
  if ($paragraph->bundle() === 'view') {
    $view_ref = $paragraph->field_view_ref->getValue();
    // Add suggestions for paragraph views with different views id and block.
    $suggestions[] = 'paragraph__view__' . $view_ref[0]['target_id'] . '_' . $view_ref[0]['display_id'];
  }
}
